<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on API2HTML | Convert raw API data into beautiful webpages</title>
    <link>/docs/</link>
    <description>Recent content in Docs on API2HTML | Convert raw API data into beautiful webpages</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Feb 2018 16:43:08 +0100</lastBuildDate>
    
	<atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Overview</title>
      <link>/docs/overview/</link>
      <pubDate>Sun, 04 Feb 2018 16:43:08 +0100</pubDate>
      
      <guid>/docs/overview/</guid>
      <description>How API2HTML works? To create a new site just define in a configuration .json file all the pages you want to serve (URL patterns) along with its associated view (template) and external API call where the data is (backend). In a nutshell you create a json file similar to this:
&amp;quot;pages&amp;quot;:[ { &amp;quot;URLPattern&amp;quot;: &amp;quot;/posts/:post_id&amp;quot;, &amp;quot;BackendURLPattern&amp;quot;: &amp;quot;https://jsonplaceholder.typicode.com/posts/:post_id&amp;quot;, &amp;quot;Template&amp;quot;: &amp;quot;post&amp;quot;, ...  API2HTML will take it from here and will serve pages like /post/23, calling the defined backend API and injecting the data in the post template.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>/docs/getting-started/</link>
      <pubDate>Sun, 04 Feb 2018 16:43:08 +0100</pubDate>
      
      <guid>/docs/getting-started/</guid>
      <description>Download The first thing you need to do is to download or clone the source code of API2HTML.
Download or clone
Compilation requirements API2HTML is a self-contained binary with no external dependencies. Nevertheless, in order to generate the binary you will need:
 Go lang (install) make (your operating system usually comes with this)  Installation Once you have the source code, you need to compile it from the terminal.</description>
    </item>
    
    <item>
      <title>Running the server</title>
      <link>/docs/running-the-server/</link>
      <pubDate>Mon, 12 Feb 2018 12:20:00 +0100</pubDate>
      
      <guid>/docs/running-the-server/</guid>
      <description>API2HTML needs a configuration file in json format with the definition of the service you want to start. As the configuration file declares what templates are loaded in every page, you will need to have these templates in a folder too. The easiest way to get started is using the blog example provided in the source code under examples/blog. Here you have all the files to run your first site.</description>
    </item>
    
    <item>
      <title>Creating your first site</title>
      <link>/docs/creating-your-first-site/</link>
      <pubDate>Sun, 04 Feb 2018 16:43:08 +0100</pubDate>
      
      <guid>/docs/creating-your-first-site/</guid>
      <description>Before understanding all the options and capabilities of the tool let&amp;rsquo;s have a quick look to the workflow involved in creating a new site. Let&amp;rsquo;s keep using the blog example as the base to construct a new site:
1) Define the page route Decide what are the pages that you want to serve and type the URL directly in the URLPattern field. You can use any :variables you want here.</description>
    </item>
    
    <item>
      <title>Configuration file</title>
      <link>/docs/configuration-file/</link>
      <pubDate>Thu, 08 Feb 2018 16:35:08 +0100</pubDate>
      
      <guid>/docs/configuration-file/</guid>
      <description>Let&amp;rsquo;s start with an example and then let&amp;rsquo;s decompose the keys:
{ &amp;quot;robots&amp;quot;: true, &amp;quot;sitemap&amp;quot;: true, &amp;quot;static_txt_content&amp;quot;: [ &amp;quot;hello.txt&amp;quot; ], &amp;quot;pages&amp;quot;:[ { &amp;quot;name&amp;quot;: &amp;quot;post&amp;quot;, &amp;quot;URLPattern&amp;quot;: &amp;quot;/posts/:post&amp;quot;, &amp;quot;BackendURLPattern&amp;quot;: &amp;quot;https://jsonplaceholder.typicode.com/posts/:post&amp;quot;, &amp;quot;Template&amp;quot;: &amp;quot;post&amp;quot;, &amp;quot;Layout&amp;quot;: &amp;quot;main&amp;quot;, &amp;quot;CacheTTL&amp;quot;: &amp;quot;3600s&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;home&amp;quot;, &amp;quot;URLPattern&amp;quot;: &amp;quot;/&amp;quot;, &amp;quot;BackendURLPattern&amp;quot;: &amp;quot;https://jsonplaceholder.typicode.com/posts&amp;quot;, &amp;quot;Template&amp;quot;: &amp;quot;home&amp;quot;, &amp;quot;Layout&amp;quot;: &amp;quot;main&amp;quot;, &amp;quot;CacheTTL&amp;quot;: &amp;quot;3600s&amp;quot;, &amp;quot;IsArray&amp;quot;: true, &amp;quot;extra&amp;quot;: {&amp;quot;is_home&amp;quot;:true } } ], &amp;quot;templates&amp;quot;: {&amp;quot;home&amp;quot;:&amp;quot;home.mustache&amp;quot;,&amp;quot;post&amp;quot;:&amp;quot;post.mustache&amp;quot;}, &amp;quot;layouts&amp;quot;: {&amp;quot;main&amp;quot;:&amp;quot;main_layout.mustache&amp;quot;}, &amp;quot;extra&amp;quot;:{ &amp;quot;lang&amp;quot;: &amp;quot;en-US&amp;quot;, &amp;quot;copyright&amp;quot;: &amp;quot;© 2018 My Company&amp;quot; }, &amp;quot;public_folder&amp;quot;: { &amp;quot;path_to_folder&amp;quot;: &amp;quot;.</description>
    </item>
    
    <item>
      <title>Templates</title>
      <link>/docs/templates/</link>
      <pubDate>Thu, 08 Feb 2018 16:35:08 +0100</pubDate>
      
      <guid>/docs/templates/</guid>
      <description>The templates are the essential part of API2HTML as they are the only thing you need to code to make your site. All the templates are expected to be mustache templates. In the examples we use the extension .mustache but it is up to you the extension you want to use (or none), even .html, as long as you declare the filename in the templates section.
Template vs Layout A template and a layout are in essence the same thing: HTML content that will be loaded in the page.</description>
    </item>
    
    <item>
      <title>Customizing errors</title>
      <link>/docs/customizing-errors/</link>
      <pubDate>Sun, 04 Feb 2018 16:43:08 +0100</pubDate>
      
      <guid>/docs/customizing-errors/</guid>
      <description>When you start the server and the errors are not yet customized you will see the following messages in the console:
reading ./static/500 : open ./static/500: no such file or directory reading ./static/404 : open ./static/404: no such file or directory reading ./static/405 : open ./static/405: no such file or directory  This message is just informing you that whenever an HTTP error 500, 404 or 405 is raised the user will just see a message in plain text, similar to this:</description>
    </item>
    
    <item>
      <title>New Relic integration</title>
      <link>/docs/new-relic-integration/</link>
      <pubDate>Thu, 08 Feb 2018 16:35:08 +0100</pubDate>
      
      <guid>/docs/new-relic-integration/</guid>
      <description>The API2HTML integration with New Relic does all the heavy lifting for you. By setting your license key and the name of the application you will be able to see the activity in New Relic.
With the New Relic integration you can:
 Follow the throughput, response times, and errors. See the memory usage, garbage collection, and CPU usage. Detect change of trends when introducing different backend calls.  Adding New Relic Add the following code to your configuration.</description>
    </item>
    
    <item>
      <title>Multi site generator</title>
      <link>/docs/generator/</link>
      <pubDate>Thu, 08 Feb 2018 16:35:08 +0100</pubDate>
      
      <guid>/docs/generator/</guid>
      <description>What is the generator? Mustache is a logic-less templates, meaning that you have a limited set of options to display your content (and also a limited possibility to have errors). Usually template engines have responsibilities like dealing with translations or site configuration that have nothing related with the rendered template itself.
If you wanted to inject translations in a mustache template you would need to inject as part of the data the translations used in the page.</description>
    </item>
    
    <item>
      <title>Generating multiple sites</title>
      <link>/docs/generating-multiple-sites/</link>
      <pubDate>Thu, 08 Feb 2018 16:35:08 +0100</pubDate>
      
      <guid>/docs/generating-multiple-sites/</guid>
      <description>Directory structure The generator needs to have a known folder structure in order to operate properly. Let&amp;rsquo;s see a typical directory structure the generator knows to use:
your_project/ ├── config │ ├── ca-ES │ │ ├── config.ini │ │ └── routes.ini │ └── global │ ├── config.ini │ └── routes.ini ├── i18n │ ├── ca-ES.ini │ ├── en-US.ini │ └── zh-CN.ini └── sources ├── ca-ES │ └── static │ ├── 1234567890.</description>
    </item>
    
    <item>
      <title>Running the generator</title>
      <link>/docs/running-the-generator/</link>
      <pubDate>Thu, 08 Feb 2018 16:35:08 +0100</pubDate>
      
      <guid>/docs/running-the-generator/</guid>
      <description>In order to use the generator the first thing you need to have is the folder structure expected by the generator.
You can see the usage of the command passing the help flag:
$ api2html generate -h Generate the final api2html templates. Usage: api2html generate [flags] Aliases: generate, create, new Examples: api2html generate -i en_US -r partial Flags: -h, --help help for generate -i, --iso string (comma-separated) iso code of the site to create (default &amp;quot;*&amp;quot;) -p, --path string Base path for the generation (default &amp;quot;/Users/artomb/git/go/src/github.</description>
    </item>
    
    <item>
      <title>Mustache templates</title>
      <link>/docs/mustache/</link>
      <pubDate>Thu, 08 Feb 2018 16:35:08 +0100</pubDate>
      
      <guid>/docs/mustache/</guid>
      <description>If you are not familiar with Mustache, we recommend you to start reading the super simple Mustache&amp;rsquo;s syntax and build templates. Here is a basic example:
template.mustache
&amp;lt;h1&amp;gt;{{header}}&amp;lt;/h1&amp;gt; {{#bug}} {{/bug}} {{#items}} {{#first}} &amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;{{name}}&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt; {{/first}} {{#link}} &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{url}}&amp;quot;&amp;gt;{{name}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; {{/link}} {{/items}} {{#empty}} &amp;lt;p&amp;gt;The list is empty.&amp;lt;/p&amp;gt; {{/empty}}  With the data
{ &amp;quot;header&amp;quot;: &amp;quot;Colors&amp;quot;, &amp;quot;items&amp;quot;: [ {&amp;quot;name&amp;quot;: &amp;quot;red&amp;quot;, &amp;quot;first&amp;quot;: true, &amp;quot;url&amp;quot;: &amp;quot;#Red&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;green&amp;quot;, &amp;quot;link&amp;quot;: true, &amp;quot;url&amp;quot;: &amp;quot;#Green&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;blue&amp;quot;, &amp;quot;link&amp;quot;: true, &amp;quot;url&amp;quot;: &amp;quot;#Blue&amp;quot;} ], &amp;quot;empty&amp;quot;: false }  Produces the following HTML when rendered:</description>
    </item>
    
    <item>
      <title>Hot reload</title>
      <link>/docs/hot-reload/</link>
      <pubDate>Thu, 08 Feb 2018 16:35:08 +0100</pubDate>
      
      <guid>/docs/hot-reload/</guid>
      <description>As API2HTML loads all the templates in-memory during start-up time, changing the content of a template in the disk has no effect in the server. This means that whenever you change the content of a template you need to inform the server that this happened, or restart the server instead.
While we are in development it is very convenient to have an automated system that applies the changes in the server for us.</description>
    </item>
    
    <item>
      <title>Common problems</title>
      <link>/docs/common-problems/</link>
      <pubDate>Sun, 04 Feb 2018 16:43:08 +0100</pubDate>
      
      <guid>/docs/common-problems/</guid>
      <description>The server returns a 500 error Cannot unmarshal Symptoms
The API2HTML server returns a 500 error for a request and logs messages like these ones:
Error #01: json: cannot unmarshal object into Go value of type []map[string]interface {} Error #01: json: cannot unmarshal array into Go value of type map[string]interface {}  Diagnosis
Your configuration is not properly defining the expected type of result it should get from the backend.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>/docs/debugging/</link>
      <pubDate>Sun, 04 Feb 2018 16:43:08 +0100</pubDate>
      
      <guid>/docs/debugging/</guid>
      <description>In addition to see what is going on in the API you are getting the data from, there is a couple of things you can do to have a healthy debugging session.
Add the debug template API2HTML comes with an internal template that you can reference in any of your templates to see the debug. Only if the server has been started with the -d flag you will be able to see it.</description>
    </item>
    
  </channel>
</rss>